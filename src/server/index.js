// require('dotenv').config()
import util from 'util'
import express from 'express'
const app = express()
const PORT = process.env.PORT || 3002

import router from './router'

import path from 'path'
import { ChunkExtractor } from '@loadable/server'

import React from 'react'
import { renderToString } from 'react-dom/server'
import { StaticRouter as Router } from 'react-router-dom'
import { Provider } from 'react-redux'
import index from '../views'
import App from '../client/App'

app.use(express.json())
const staticFile = path.resolve(__dirname + '../../../public')
const clientFile = path.resolve(__dirname + '../../client')
app.use(express.static(staticFile))
app.use(express.static(clientFile))

app.use(router)

app.get('*', (req, res) => {
    const store = req.store
    // if(req.path == 'catalogue')
    //         dispatch(getCatalogue(
    //             { 
    //                 area_sameday : "REGULER",
    //                 category : 8,
    //                 limit18 : true,
    //                 pack : 1
    //             }
    //         ))
    console.log(req.path);
    // if(req.path === '/catalogue')
    //     await cataloguePage()
    const preloadedState = store.getState()
    // This is the stats file generated by webpack loadable plugin
    const statsFile = path.resolve(__dirname + '../../client' + '/loadable-stats.json')
    // We create an extractor from the statsFile
    const extractor = new ChunkExtractor({ statsFile })

    // Wrap your application using "collectChunks"
    const jsx = extractor.collectChunks(
        <Provider store={store}>
            <Router
                location={req.url} 
                context={{}}
                >
                <App />
            </Router>
        </Provider>
    )
    // Render your application
    const html = renderToString(jsx)
    // You can now collect your script tags
    const scriptTags = extractor.getScriptTags() // or extractor.getScriptElements();
    // You can also collect your "preload/prefetch" links
    const linkTags = extractor.getLinkTags() // or extractor.getLinkElements();
    // And you can even collect your style tags (if you use "mini-css-extract-plugin")
    const styleTags = extractor.getStyleTags() // or extractor.getStyleElements();
    const htmlString = index(html, linkTags, styleTags, scriptTags, preloadedState)
    res.send(htmlString)
})



app.listen(PORT, e => console.log("Server is listening on PORT:" + PORT))